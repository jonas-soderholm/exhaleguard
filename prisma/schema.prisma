generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" // SQLite database file
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

// User table mapped to Supabase auth.users
model User {
  id             String        @id // Supabase auth.users.id
  email          String        @unique // Email from Supabase
  subscriptions  Subscription[] // Tracks the user's subscriptions (access to courses)
  progressions   Progress[]    // Tracks user progress in courses
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Subscription {
  id          Int      @id @default(autoincrement())
  startDate   DateTime // When the access started
  endDate     DateTime // When the access ends (e.g., 1 month after start)
  isActive    Boolean  @default(true) // Indicates if the subscription is still active
  userId      String   // Reference to User
  user        User     @relation(fields: [userId], references: [id]) // Establish relationship with User
}

model Progress {
  id           Int      @id @default(autoincrement())
  courseId     Int
  lessonId     Int?     // Nullable to allow progress tracking for the course overall
  sectionId    Int?     // Nullable to track specific sections within a lesson
  course       Course   @relation(fields: [courseId], references: [id])  // Links progress to the course
  lesson       Lesson?  @relation(fields: [lessonId], references: [id])  // Links progress to a lesson (optional)
  section      LessonSection? @relation(fields: [sectionId], references: [id])  // Links progress to a section (optional)
  completed    Boolean  @default(false) // Tracks if the section/lesson/course is completed
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId       String   // We explicitly need to define userId
  user         User     @relation(fields: [userId], references: [id]) // Links progress to a user

  // Composite key for uniqueness at the course, lesson, and section level
  @@unique([courseId, lessonId, sectionId])
}

model Course {
  id           Int             @id @default(autoincrement())
  progressions Progress[]       // Tracks progress in this course
  lessons      Lesson[]         // Links lessons to the course
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Lesson {
  id           Int             @id @default(autoincrement())
  courseId     Int
  course       Course           @relation(fields: [courseId], references: [id])
  progressions Progress[]       // Track progress for this lesson
  sections     LessonSection[]  // Tracks sections within this lesson
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model LessonSection {
  id           Int              @id @default(autoincrement())
  lessonId     Int
  lesson       Lesson           @relation(fields: [lessonId], references: [id])
  progressions Progress[]       // Add this relation field for bidirectional mapping
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([lessonId, id]) // Ensure unique sections within a lesson
}